/**
 * @file MathDocumentMsg.cpp
 * Implementation of the container holding a message generated by the interpreter
 * 
 * @copyright Copyright 2015 Anthony Tibbs
 * This project is released under the GNU General Public License.
*/

#include <iostream>
#include <sstream>
#include <string>

#include "MathDocumentMsg.h"

/**
 * Sets up a new math document message object.
 *
 * @param category Message category
 * @param msgCode Application-defined numeric message code
 * @param source_filename Filename of document line loaded from
 * @param source_linenumber1 Number of line in file
 * @param source_linenumber2 Number of line (if continuation line) in file
 * @param text Contents of the line
 */
MathDocumentMsg::MathDocumentMsg (const MathDocumentMsg::MDMCategory category,
				  const unsigned long msgCode,
				  const std::string &source_filename,
				  const unsigned long source_linenumber1, 
				  const unsigned long source_linenumber2, 
				  const std::string &msg) : m_category(category), m_code(msgCode), m_filename(source_filename), m_line1(source_linenumber1), m_line2(source_linenumber2), m_message(msg)
{
}

/**
 * Retrieve the category associated with this message.
 *
 * @return Category associated with this message
 */
MathDocumentMsg::MDMCategory MathDocumentMsg::getCategory (void) const
{
  return m_category;
}

/**
 * Retrieve the numberic message code associated with this message.
 */
unsigned long MathDocumentMsg::getCode (void) const
{
  return m_code;
}

/**
 * Retrieve the filename associated with this message.
 *
 * @return Filename associated with this message
 */
std::string MathDocumentMsg::getFilename (void) const
{
  return m_filename;
}

/**
 * Retrieve the starting line number associated with this message.
 *
 * @return First source line number associated with this message.
 */
unsigned long MathDocumentMsg::getStartLineNumber (void) const
{
  return m_line1;
}

/**
 * Retrieve the ending line number associated with this message.
 *
 * @return Final source line numer associated with this message.
 */
unsigned long MathDocumentMsg::getEndLineNumber (void) const
{
  return m_line2;
}

/**
 * Retrieve the contents of the line.
 *
 * @return Contents of the line.
 */
std::string MathDocumentMsg::getMessage (void) const
{
  return m_message;
}

/**
 * Stream the entire source line (primarily for debugging).
 */
std::ostream &operator<<(std::ostream &os, const MathDocumentMsg &mdm)
{
  unsigned long l1, l2;
  std::ostringstream lineNum;
  std::string categoryStr;

  switch (mdm.getCategory()) {
  case MathDocumentMsg::INFO: 
    categoryStr = "FYI"; 
    break;
    
  case MathDocumentMsg::NOTICE:
    categoryStr = "NOTE"; 
    break;

  case MathDocumentMsg::WARNING:
    categoryStr = "WARNING";
    break;

  case MathDocumentMsg::ERROR:
    categoryStr = "ERROR";
    break;
  }

  l1 = mdm.getStartLineNumber();
  l2 = mdm.getEndLineNumber();
  if (l1 == l2)
    lineNum << l1;
  else
    lineNum << l1 << "-" << l2;

  return (os << categoryStr << ": " << mdm.getMessage() 
	     << " (at line " << lineNum.str() 
	  << " in " << mdm.getFilename() << ")");
}

